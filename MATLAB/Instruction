This document gives instructions on how to use binary image transition state search (BITSS) and nudged elastic band (NEB) algorithms based on MATLAB to capture the saddle point and minimum energy path (MEP) of bistable elastic continua. Particularly, the finite element code is limited to 2D plane strain problems using triangular meshes. Two examples are given. The first example is a bistable buckled beam with 1% axial compressive strain and 0Â° end rotational angles (Figure 3 in the paper). The second example is a bistable unit with an asymmetric configuration (Figure 8 in the paper). The BITSS and NEB codes are files bitss_hessian.m (BITSS), NEB_Jacobian_NewTangt.m (NEB without image climbing method) and NEB_Jacobian_NewTangt_Saddle.m (NEB with image climbing method). 

1. Bistable Buckled Beam (Folder: Examples\Buckle_Beam_cp001)

Step One: find stable states S1 and S2.
Run the code script fem_tri_planestrain_Newton_Stable.m to find stable states S1 and S2 of a bistable buckled beam. For convenience, we use ABAQUS to calculate the displacement field, which is taken as the initial guess in our 2D FEM code (e.g., BuckleBeam_y1_Left_mesh4-50_Disp.txt). We also use ABAQUS to create meshes, and the information is provided by the ABAQUS input file BuckleBeam_y1_Left_mesh4-50.inp. Details can be found in program notes. 
It is worth mentioning that our 2D FEM code uses imaginary derivative to calculate the stiffness matrix. Therefore, the increment in the imaginary derivative can affect the precision and convergence of the code. It is recommended that the value 1e-5 is chosen. However, this increment can be adjusted to help convergence for other specific problems. 
Once the stable states S1 and S2 are found, we can also perform indentation on the buckled beam by running the code script fem_tri_planestrain_Newton_Indent.m. Details can be found in program notes.  

Step Two: find the saddle point using the BITSS method.
Run the script PlaneStrain_Saddle_BITSS.m to employ the BITSS algorithm (bitss_hessian.m) to capture the saddle point. The script needs input of nodal coordinates of stable states S1 and S2 from Step One (e.g., BuckleBeam_y1_Left_mesh4-50.txt). The BITSS algorithm also allows output of iterations of two images (e.g., BuckleBeam_y1_mesh4-50_BITSS_pt1_alpha10_beta01_dist005-005_re1e-8_iter3_Interm_dist0.txt). Details can be found in program notes. 

Step Three: use energy descent method initiated at two images from BITSS to provide initial guess for NEB.
Run the script EnergyDescentMethod.m to employ the energy descent method initiated at two images from the BITSS method. The script needs input of nodal coordinates of two images from the BITSS algorithm in Step Two (e.g., BuckleBeam_y1_mesh4-50_BITSS_pt1_alpha10_beta01_dist005-005_re1e-8_iter3_dist0.txt). The MATLAB default algorithm @fminunc is used. The iterative results of two images provide an initial guess for the NEB method. 

Step Four: use the NEB method to capture the MEP.
Run the script PlaneStrain_Saddle.m to capture the MEP based on the NEB program (NEB_Jacobian_NewTangt.m and NEB_Jacobian_NewTangt_Saddle.m). The NEB program allows output of iterations (e.g., BuckleBeam_y1_mesh4-50_NEB_N=3_EngDes_BITSS_kk=1e-5_Interm.txt). The script needs input of nodal coordinates of two end images from Step One and initial guess from Step Three (e.g., BuckleBeam_y1_mesh4-50_EnergyDescent_BITSS1.txt). Details can be found in program notes. 

Step Five: post-processing.
Run the scripts fem_tri_planestrain_Newton_PostProcess.m and Figure_Plot.m to perform post-processing and generate figures in Figure. 3 in the paper. Details can be found in program notes. 

2. Bistable Unit (Folder: Examples\Bistable_Unit_angle_40-45)

Step One: find stable states S1 and S2.
Run the code script fem_tri_planestrain_Newton_Stable.m to find stable states S1 and S2 of a bistable unit. For convenience, we use ABAQUS to calculate the displacement field, which is taken as the initial guess in our 2D FEM code (e.g., t06_L5_theta40-50_twobeam_mesh4-50_mu1_lambda3_E100_nu03_TopFree_Disp.txt). We also use ABAQUS to create meshes, and the information is provided by the ABAQUS input file t06_L5_theta40-50_twobeam_mesh4-50_indent5_n200_Quasi_mu1_lambda3_E100_nu03.inp. Details can be found in program notes. 
It is worth mentioning that our 2D FEM code uses imaginary derivative to calculate the stiffness matrix. Therefore, the increment in the imaginary derivative can affect the precision and convergence of the code. It is recommended that the value 1e-5 is chosen. However, this increment can be adjusted to help convergence for other specific problems. 

Step Two: find the saddle point using the BITSS method.
Run the script PlaneStrain_Saddle_BITSS.m to employ the BITSS algorithm (bitss_hessian.m) to capture the saddle point. The script needs input of nodal coordinates of stable states S1 and S2 from Step One (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_shape_topfree_Re1e-5.txt). The BITSS algorithm also allows output of iterations of two images (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_BITSS_pt1_alpha10_beta01_dist005-005_iter3_Interm_Re1e-5.txt). Details can be found in program notes. 

Step Three: use energy descent method initiated at two images from BITSS to provide initial guess for NEB.
Run the script EnergyDescentMethod.m to employ the energy descent method initiated at two images from the BITSS method. The script needs input of nodal coordinates of two images from the BITSS algorithm in Step Two (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_BITSS1_alpha10_beta01_dist005-005_iter3_Re1e-5.txt). The MATLAB default algorithm @fminunc is used. The iterative results of two images provide an initial guess for the NEB method. 

Step Four: use the NEB method to capture the MEP.
Run the script PlaneStrain_Saddle.m to capture the MEP based on the NEB program (NEB_Jacobian_NewTangt.m and NEB_Jacobian_NewTangt_Saddle.m). The NEB program allows output of iterations (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_NEB_N=5_EngDes_BITSS_kk=1e-3_Interm_Re1e-5.txt). The script needs input of nodal coordinates of two end images from Step One (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_shape_topfree_Re1e-5.txt) and initial guess from Step Three (e.g., t06_L5_theta40-45_twobeam_mesh4-50_mu1_lambda3_E100_nu03_EnergyDescent_dist005-005_BITSS1_Re1e-5.txt). Details can be found in program notes. 

Step Five: post-processing.
Run the scripts fem_tri_planestrain_Newton_PostProcess.m and Figure_Plot.m to perform post-processing and generate figures in Figure. 8 in the paper. Details can be found in program notes. 
